/**
 * @license
 *
 * Copyright IBM Corp. 2020, 2022
 *
 * This source code is licensed under the Apache-2.0 license found in the
 * LICENSE file in the root directory of this source tree.
 */

import {
  html,
  customElement,
  property,
  LitElement,
} from 'lit-element';
// import settings from 'carbon-components/es/globals/js/settings.js';
import ddsSettings from '../../internal/vendor/@carbon/ibmdotcom-utilities/utilities/settings/settings';
import { CONTENT_BLOCK_COMPLEMENTARY_STYLE_SCHEME } from './defs';
import styles from './content-block.scss';
import StableSelectorMixin from '../../globals/mixins/stable-selector';

export { CONTENT_BLOCK_COMPLEMENTARY_STYLE_SCHEME };

const { stablePrefix: ddsPrefix } = ddsSettings;
// const { prefix } = settings;

/**
 * The table mapping slot name with the private property name that indicates the existence of the slot content.
 */
// const slotExistencePropertyNames = {
//   complementary: '_hasComplementary',
//   copy: '_hasCopy',
//   heading: '_hasHeading',
//   footer: '_hasFooter',
//   media: '_hasMedia',
// };

// TODO: Figure out how to define a mixin type supporting abstract class
/**
 * Content block.
 *
 * @slot heading - The heading content.
 * @slot copy - The copy content.
 * @slot media - The media content.
 * @slot footer - The footer (CTA) content.
 * @slot complementary - The complementary (aside) content.
 * @abstract
 */
@customElement(`${ddsPrefix}-content-block-v2`)
class DDSContentBlockV2 extends StableSelectorMixin(LitElement) {

  @property({ type: Boolean, reflect: true, attribute: 'padding' })
  padding = false;

  @property({ type: Boolean, reflect: true, attribute: 'border' })
  border = false;

  render() {
    return html`
      <div class="all">
        <slot name="heading" @slotchange=""></slot>
        <div class="body">
          <div class="inner">
            <slot name="copy" @slotchange=""></slot>
            <slot @slotchange=""></slot>
            <slot name="footer" @slotchange=""></slot>
          </div>
          <slot name="complementary" @slotchange=""></slot>
        </div>
      </div>
      ${this.border ? html` <dds-hr></dds-hr> ` : ''}
    `;
  }

  static styles = styles; // `styles` here is a `CSSResult` generated by custom WebPack loader
}

/* @__GENERATE_REACT_CUSTOM_ELEMENT_TYPE__ */
export default DDSContentBlockV2;
